877. stone game
有2n堆石头，总和为奇数。a、b两人轮流拿开头或结尾的一堆，最终a赢返回true，否则返回false。
    //dp：每当b拿时，从a中扣，最终只要a的数量>0即可。
    // dp[i,j]表示a从piles[i]...piles[j]中可以获得的最大数量，根据dp[i+1,j]和dp[i,j-1]确定。用(j-i)%2确定当前是谁在拿。
    //若a拿，则dp[i,j]=max(p[i]+dp[i+1,j], p[j]+dp[i,j-1])。若b拿，dp[i,j]=min(-p[i]+dp[i+1,j], -p[j]+dp[i,j-1])
    public boolean stoneGame(int[] piles) {
        int n = piles.length;
        int[][] dp = new int[n+2][n+2];//dp[i+1][j+1]表示piles[i]...piles[j]
        for (int size = 1; size <=n; size++) {
            for (int i = 0; i + size <=n; i++) {
                int j = i+size-1;
                int parity = (j+i+n)%2;
                if (parity==1){
                    dp[i+1][j+1]=Math.max(piles[i]+dp[i+2][j+1], piles[j]+dp[i+1][j]);
                } else {
                    dp[i+1][j+1]=Math.min(-piles[i]+dp[i+2][j+1], -piles[j]+dp[i+1][j]);
                }
            }
        }
        return dp[1][n]>0;
    }
    
    //若a先开始拿，随便拿！ 比较数量：若多于b，赢；若少于b，则自己拿石头的顺序和b对调，赢 =>无论怎么拿，稳赢
    // public boolean stoneGame(int[] piles) {
    //     return true;
    // }
