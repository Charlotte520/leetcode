19.删除倒数第n个节点
public ListNode removeNthFromEnd(ListNode head, int n) {
        if (n <= 0) return head;
        ListNode dummy = new ListNode(0);
        dummy.next = head; //设置伪头节点，简化处理
        ListNode p = head; //从head开始，而不是dummy
        for (int i = 0; i < n; i++) {
            if(p == null)   return null;//n>list长度
            p=p.next;
        }
        
        ListNode cur = dummy;//从dummy开始，而不是head
        while (p != null) { 
            cur = cur.next;
            p = p.next;
        }
        cur.next = cur.next.next;//n<=list长度，删除中间节点
        return dummy.next;
    }
    
141.链表有环
public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null)   return false;
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (slow == fast) return true;
        }
        return false;
    }
   
142.定位环入口   
    //先找到相遇点，p1从头，p2从相遇点开始，再次相遇为入口
    public ListNode detectCycle(ListNode head) {
        ListNode node = meetPoint(head);
        if (node == null) return null;//无环
        ListNode p1 = head;
        ListNode p2 = node;
        while (p1 != p2) {
            p1 = p1.next;
            p2 = p2.next;
        }
        return p1;
    }

    ListNode meetPoint(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) return slow;
        }
        return null;
    }
 求环长：从第一次相遇位置继续，slow每次走一个，fast走两个，初始长度为1，每走一次加1，直到再次相遇
 
 
